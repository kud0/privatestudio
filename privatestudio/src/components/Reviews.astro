---
const reviews = [
  {
    name: "Alejandro Martínez",
    review: "Profesionales de alto nivel. El corte de pelo y arreglo de barba fueron perfectos. Ambiente muy agradable y relajado.",
    rating: 5,
    date: "Noviembre 2023"
  },
  {
    name: "Carlos Rodríguez",
    review: "Excelente servicio y atención. Mi barbero entendió exactamente lo que quería. Sin duda mi lugar favorito para cuidar mi imagen en Barcelona.",
    rating: 5,
    date: "Octubre 2023"
  },
  {
    name: "Marc Fernández",
    review: "Primera vez que visito Private Studio y no será la última. Servicio impecable, instalaciones modernas y resultados excelentes.",
    rating: 5,
    date: "Diciembre 2023"
  },
  {
    name: "David López",
    review: "Me encanta el estilo y la dedicación que ponen en cada cliente. Vale cada euro que pagas. Totalmente recomendable.",
    rating: 5,
    date: "Enero 2024"
  },
  {
    name: "David López",
    review: "Me encanta el estilo y la dedicación que ponen en cada cliente. Vale cada euro que pagas. Totalmente recomendable.",
    rating: 5,
    date: "Enero 2024"
  },
  {
    name: "Carlos Rodríguez",
    review: "Excelente servicio y atención. Mi barbero entendió exactamente lo que quería. Sin duda mi lugar favorito para cuidar mi imagen en Barcelona.",
    rating: 5,
    date: "Octubre 2023"
  }
];
---

<section id="reviews" class="py-20 bg-gray-100">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-4">OPINIONES</h2>
    <p class="text-gray-600 text-center max-w-2xl mx-auto mb-12">Lo que dicen nuestros clientes</p>
    
    <!-- Mobile view (slider) -->
    <div class="relative md:hidden">
      <div class="overflow-hidden" id="mobile-reviews-container">
        <div class="transition-transform duration-500" id="mobile-reviews-wrapper">
          {reviews.map((review, index) => (
            <div class="mobile-review-slide bg-white p-8 rounded-none shadow-md w-full hidden">
              <div class="flex items-start gap-6">
                <!-- Left: Avatar and name -->
                <div class="flex-shrink-0">
                  <div class="w-12 h-12 rounded-full bg-black text-white flex items-center justify-center text-xl font-bold">
                    {review.name.charAt(0)}
                  </div>
                </div>
                
                <!-- Right: Content -->
                <div class="flex-grow">
                  <div class="flex justify-between items-start mb-2">
                    <div>
                      <h3 class="text-xl font-bold">{review.name}</h3>
                      <p class="text-gray-500">{review.date}</p>
                    </div>
                    <div class="flex">
                      {Array.from({ length: review.rating }).map(() => (
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                      ))}
                    </div>
                  </div>
                  <p class="text-gray-700">{review.review}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <!-- Mobile navigation buttons -->
        <button id="mobile-prev-btn" class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-4 bg-black text-white w-10 h-10 rounded-full flex items-center justify-center focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button id="mobile-next-btn" class="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-4 bg-black text-white w-10 h-10 rounded-full flex items-center justify-center focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
        
        <!-- Mobile indicator dots -->
        <div class="flex justify-center mt-8 space-x-2">
          {reviews.map((_, index) => (
            <button class={`w-3 h-3 rounded-full transition-colors duration-300 focus:outline-none mobile-indicator-dot ${index === 0 ? 'bg-black' : 'bg-gray-300'}`} data-index={index}></button>
          ))}
        </div>
      </div>
    </div>
    
    <!-- Desktop view (grid) -->
    <div class="hidden md:grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
      {reviews.map((review) => (
        <div class="bg-white p-8 shadow-md">
          <div class="flex items-start gap-4 mb-4">
            <div class="w-12 h-12 rounded-full bg-black text-white flex items-center justify-center text-xl font-bold">
              {review.name.charAt(0)}
            </div>
            <div>
              <h3 class="text-xl font-bold">{review.name}</h3>
              <p class="text-sm text-gray-500">{review.date}</p>
            </div>
          </div>
          
          <div class="flex mb-4">
            {Array.from({ length: review.rating }).map(() => (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>
          
          <p class="text-gray-700">{review.review}</p>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile slider functionality
    const mobileSlides = document.querySelectorAll('.mobile-review-slide');
    const mobileDots = document.querySelectorAll('.mobile-indicator-dot');
    const mobilePrevBtn = document.getElementById('mobile-prev-btn');
    const mobileNextBtn = document.getElementById('mobile-next-btn');
    
    let currentMobileIndex = 0;
    
    // Function to show mobile slide at given index
    function showMobileSlide(index) {
      // Hide all slides
      mobileSlides.forEach(slide => {
        slide.classList.add('hidden');
      });
      
      // Show current slide
      mobileSlides[index].classList.remove('hidden');
      
      // Update indicator dots
      mobileDots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.remove('bg-gray-300');
          dot.classList.add('bg-black');
        } else {
          dot.classList.remove('bg-black');
          dot.classList.add('bg-gray-300');
        }
      });
      
      currentMobileIndex = index;
    }
    
    // Show first mobile slide initially
    if (mobileSlides.length > 0) {
      showMobileSlide(0);
    }
    
    // Previous button click
    mobilePrevBtn?.addEventListener('click', () => {
      const newIndex = (currentMobileIndex - 1 + mobileSlides.length) % mobileSlides.length;
      showMobileSlide(newIndex);
    });
    
    // Next button click
    mobileNextBtn?.addEventListener('click', () => {
      const newIndex = (currentMobileIndex + 1) % mobileSlides.length;
      showMobileSlide(newIndex);
    });
    
    // Indicator dots click
    mobileDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showMobileSlide(index);
      });
    });
    
    // Auto advance slides every 5 seconds on mobile
    let mobileSlideInterval = setInterval(() => {
      if (mobileSlides.length > 0) {
        const newIndex = (currentMobileIndex + 1) % mobileSlides.length;
        showMobileSlide(newIndex);
      }
    }, 5000);
    
    // Pause auto-advance when hovering over the slider
    const mobileContainer = document.getElementById('mobile-reviews-container');
    mobileContainer?.addEventListener('mouseenter', () => {
      clearInterval(mobileSlideInterval);
    });
    
    mobileContainer?.addEventListener('mouseleave', () => {
      mobileSlideInterval = setInterval(() => {
        if (mobileSlides.length > 0) {
          const newIndex = (currentMobileIndex + 1) % mobileSlides.length;
          showMobileSlide(newIndex);
        }
      }, 5000);
    });
  });
</script> 